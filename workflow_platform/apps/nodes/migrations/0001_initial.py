# Generated by Django 4.2.7 on 2025-08-09 13:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("organizations", "__first__"),
        ("workflows", "__first__"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="NodeCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#6366f1", max_length=7)),
                ("sort_order", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Node Categories",
                "db_table": "node_categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="NodeType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-z0-9_]+$",
                                "Only lowercase letters, numbers, and underscores allowed",
                            )
                        ],
                    ),
                ),
                ("display_name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "node_type",
                    models.CharField(
                        choices=[
                            ("trigger", "Trigger"),
                            ("action", "Action"),
                            ("transform", "Transform"),
                            ("condition", "Condition"),
                            ("output", "Output"),
                        ],
                        default="action",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("built_in", "Built-in"),
                            ("community", "Community"),
                            ("custom", "Custom"),
                            ("premium", "Premium"),
                        ],
                        default="built_in",
                        max_length=20,
                    ),
                ),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#6366f1", max_length=7)),
                ("executor_class", models.CharField(max_length=255)),
                ("schema_version", models.CharField(default="1.0", max_length=10)),
                ("properties_schema", models.JSONField(default=dict)),
                ("inputs_schema", models.JSONField(default=list)),
                ("outputs_schema", models.JSONField(default=list)),
                ("default_timeout", models.IntegerField(default=30)),
                ("max_timeout", models.IntegerField(default=300)),
                ("supports_retry", models.BooleanField(default=True)),
                ("supports_async", models.BooleanField(default=True)),
                ("required_credentials", models.JSONField(default=list)),
                ("required_packages", models.JSONField(default=list)),
                (
                    "minimum_plan",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("pro", "Pro"),
                            ("business", "Business"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                ("documentation_url", models.URLField(blank=True)),
                ("examples", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_beta", models.BooleanField(default=False)),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                ("repository_url", models.URLField(blank=True)),
                ("license", models.CharField(default="MIT", max_length=50)),
                ("usage_count", models.IntegerField(default=0)),
                ("rating", models.FloatField(default=0)),
                ("rating_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_types",
                        to="nodes.nodecategory",
                    ),
                ),
            ],
            options={
                "db_table": "node_types",
            },
        ),
        migrations.CreateModel(
            name="NodeTypeCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#4f46e5", max_length=7)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Node Type Category",
                "verbose_name_plural": "Node Type Categories",
                "db_table": "node_type_categories",
            },
        ),
        migrations.CreateModel(
            name="NodeExecutionLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("node_id", models.CharField(max_length=255)),
                ("node_name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                            ("timeout", "Timeout"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("execution_time", models.FloatField(blank=True, null=True)),
                ("input_data", models.JSONField(blank=True, default=dict)),
                ("output_data", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                ("error_type", models.CharField(blank=True, max_length=100)),
                ("error_details", models.JSONField(blank=True, default=dict)),
                ("stack_trace", models.TextField(blank=True)),
                ("memory_usage_mb", models.FloatField(default=0)),
                ("cpu_usage_percent", models.FloatField(default=0)),
                ("network_requests", models.IntegerField(default=0)),
                ("retry_count", models.IntegerField(default=0)),
                ("is_retry", models.BooleanField(default=False)),
                (
                    "execution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_logs",
                        to="workflows.workflowexecution",
                    ),
                ),
                (
                    "node_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_logs",
                        to="nodes.nodetype",
                    ),
                ),
            ],
            options={
                "db_table": "node_execution_logs",
            },
        ),
        migrations.CreateModel(
            name="NodeCredential",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "credential_type",
                    models.CharField(
                        choices=[
                            ("api_key", "API Key"),
                            ("oauth2", "OAuth 2.0"),
                            ("basic_auth", "Basic Authentication"),
                            ("bearer_token", "Bearer Token"),
                            ("ssh_key", "SSH Key"),
                            ("database", "Database Connection"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                    ),
                ),
                ("service_name", models.CharField(max_length=100)),
                ("encrypted_data", models.TextField()),
                ("encryption_key_id", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_credentials",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credentials",
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "db_table": "node_credentials",
            },
        ),
        migrations.CreateModel(
            name="CustomNodeType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("display_name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("custom_properties", models.JSONField(default=dict)),
                ("custom_code", models.TextField(blank=True)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("organization", "Organization"),
                            ("public", "Public"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "base_node_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_variants",
                        to="nodes.nodetype",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_custom_nodes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_nodes",
                        to="organizations.organization",
                    ),
                ),
                (
                    "shared_with_orgs",
                    models.ManyToManyField(
                        blank=True,
                        related_name="shared_custom_nodes",
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "db_table": "custom_node_types",
            },
        ),
        migrations.CreateModel(
            name="NodeTypeRating",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("rating", models.IntegerField()),
                ("review", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "node_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="nodes.nodetype",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_ratings",
                        to="organizations.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "node_type_ratings",
                "indexes": [
                    models.Index(
                        fields=["node_type", "rating"],
                        name="node_type_r_node_ty_848cfb_idx",
                    )
                ],
                "unique_together": {("node_type", "user", "organization")},
            },
        ),
        migrations.CreateModel(
            name="NodeTypeInstallation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("installed_version", models.CharField(max_length=20)),
                ("is_enabled", models.BooleanField(default=True)),
                ("default_config", models.JSONField(blank=True, default=dict)),
                ("installed_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "installed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="node_installations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "node_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="installations",
                        to="nodes.nodetype",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="installed_nodes",
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "db_table": "node_type_installations",
                "indexes": [
                    models.Index(
                        fields=["organization", "is_enabled"],
                        name="node_type_i_organiz_8034b0_idx",
                    ),
                    models.Index(
                        fields=["node_type", "installed_version"],
                        name="node_type_i_node_ty_67780c_idx",
                    ),
                ],
                "unique_together": {("organization", "node_type")},
            },
        ),
        migrations.AddIndex(
            model_name="nodetype",
            index=models.Index(
                fields=["node_type", "is_active"], name="node_types_node_ty_d2ec66_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodetype",
            index=models.Index(
                fields=["category", "is_active"], name="node_types_categor_58ba4f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodetype",
            index=models.Index(
                fields=["source", "is_active"], name="node_types_source_43bde9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodetype",
            index=models.Index(
                fields=["usage_count", "rating"], name="node_types_usage_c_85b480_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodeexecutionlog",
            index=models.Index(
                fields=["execution", "node_id"], name="node_execut_executi_2d9424_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodeexecutionlog",
            index=models.Index(
                fields=["node_type", "status"], name="node_execut_node_ty_960823_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodeexecutionlog",
            index=models.Index(
                fields=["started_at"], name="node_execut_started_c075b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nodeexecutionlog",
            index=models.Index(
                fields=["status", "execution_time"],
                name="node_execut_status_259fee_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="nodecredential",
            index=models.Index(
                fields=["organization", "is_active"],
                name="node_creden_organiz_149c85_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="nodecredential",
            index=models.Index(
                fields=["service_name", "credential_type"],
                name="node_creden_service_224046_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="nodecredential",
            index=models.Index(
                fields=["expires_at"], name="node_creden_expires_992d3b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="nodecredential",
            unique_together={("organization", "name")},
        ),
        migrations.AddIndex(
            model_name="customnodetype",
            index=models.Index(
                fields=["organization", "is_active"],
                name="custom_node_organiz_dd273f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customnodetype",
            index=models.Index(
                fields=["visibility", "is_active"],
                name="custom_node_visibil_9913da_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customnodetype",
            unique_together={("organization", "name")},
        ),
    ]
